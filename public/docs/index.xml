<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docs on Enlightening KT</title>
    <link>http://example.org/docs/</link>
    <description>Recent content in Docs on Enlightening KT</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="http://example.org/docs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>http://example.org/docs/hugo-tips/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/hugo-tips/</guid>
      <description> Hugo &amp;amp; Markdown Markdown Syntax Hugo Shortcodes Figure Syntax:
{{ &amp;lt; figure src=&amp;quot;../images/life-cycle-events.png&amp;quot; title=&amp;quot;Cycle of life&amp;quot; &amp;gt; }}    Cycle of life   Gist  Video (Youtube &amp;amp; Vimeo) Youtube video sample:   Vimeo video sample:   </description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/javascript/async-programming/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/javascript/async-programming/</guid>
      <description>Async Programming XHR - XmlHttpRequest
Other api methods:
- Fetch api - Axios - Superagent - Jquery - Node http   Ajax - Xhr
 XHR Code: document.getElementById(&amp;#39;button&amp;#39;).addEventListener(&amp;#39;click&amp;#39;, loadData); function loadData() { // Create an XHR Object  const xhr = new XMLHttpRequest(); // OPEN  xhr.open(&amp;#39;GET&amp;#39;, &amp;#39;data.txt&amp;#39;, true); // console.log(&amp;#39;READYSTATE&amp;#39;, xhr.readyState);  // Optional - Used for spinners/loaders  xhr.onprogress = function(){ console.log(&amp;#39;READYSTATE&amp;#39;, xhr.readyState); } xhr.onload = function(){ console.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/javascript/basics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/javascript/basics/</guid>
      <description>Basics Install Visual Studio Code and add following extentions
 Brackets pair Live server ES6 Code snippets  To find the time it took to execute the scripts:
console.time(&amp;#39;Hello&amp;#39;) console.log(&amp;#39;hello world&amp;#39;) console.log(&amp;#39;hello world&amp;#39;) console.log(&amp;#39;hello world&amp;#39;) console.log(&amp;#39;hello world&amp;#39;) console.timeEnd(&amp;#39;Hello&amp;#39;) RESULT: ==&amp;gt; Hello: 0.05898324 sec  Declaration: Var, Let, Const  Var : variable declaration Let : Similar to Var Const: cannot reassign, but object&amp;rsquo;s property can be changed.  const msg = &amp;#34;Hello world&amp;#34;; Msg = &amp;#34;Welcome&amp;#34;; // not accepted  const person = { name: &amp;#34;ABC&amp;#34;, age: 30 }; Person.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/javascript/dom-object-selectors/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/javascript/dom-object-selectors/</guid>
      <description>DOM Objects &amp;amp; Selectors Document object - basic things: let val; val = document.all[2]; //prints: &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt;  val = document.all.length; //prints: 43  val = document.head; val = document.body; val = document.doctype; val = document.domain; val = document.URL; val = document.characterSet; val = document.contentType; val = document.forms; val = document.forms[0]; val = document.forms[0].id; val = document.links; val = document.links[0]; val = document.images; val = document.scripts; val = document.scripts[0].getAttribute(&amp;#39;src&amp;#39;); // loop thru document elements - sample  let scripts = document.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/javascript/events/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/javascript/events/</guid>
      <description>Javascript Events: Event Listeners: document.querySelector(&amp;#39;.clear-tasks&amp;#39;).addEventListener(&amp;#39;click&amp;#39;, onClick); function onClick(e){ //console.log(&amp;#39;Clicked&amp;#39;);  let val; val = e; // Event target element  val = e.target; val = e.target.id; val = e.target.className; val = e.target.classList; // Event type  val = e.type; // Timestamp  val = e.timeStamp; // Coords event relative to the window  val = e.clientY; val = e.clientX; // Coords event relative to the element  val = e.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/javascript/functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/javascript/functions/</guid>
      <description>Functions Function expressions const square = function(x) { return x * x; }; const square = function(x = 4) { return x * x; }; console.log(square(11)); // Result: 121  Immediately invokable function expressions (function(name) { Console.log(&amp;#34;Hello &amp;#34; + name); })(&amp;#34;Brad&amp;#34;); // Result: Hello Brad  Property methods const todo = { add: function(){ console.log(&amp;#39;Adding todoâ€¦&amp;#39;); } edit: function(id){ console.log(&amp;#39;Editing - &amp;#39; + id); } } todo.delete = function(){ console.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/javascript/localstorage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/javascript/localstorage/</guid>
      <description>LocalStorage // set local storage item  localStorage.setItem(&amp;#39;name&amp;#39;, &amp;#39;John&amp;#39;); localStorage.setItem(&amp;#39;age&amp;#39;, &amp;#39;30&amp;#39;); // set session storage item  sessionStorage.setItem(&amp;#39;name&amp;#39;, &amp;#39;Beth&amp;#39;); // remove from storage  localStorage.removeItem(&amp;#39;name&amp;#39;); // get from storage  const name = localStorage.getItem(&amp;#39;name&amp;#39;); const age = localStorage.getItem(&amp;#39;age&amp;#39;); // clear local storage  localStorage.clear(); console.log(name, age); document.querySelector(&amp;#39;form&amp;#39;).addEventListener(&amp;#39;submit&amp;#39;, function(e){ const task = document.getElementById(&amp;#39;task&amp;#39;).value; let tasks; if(localStorage.getItem(&amp;#39;tasks&amp;#39;) === null) { tasks = []; } else { tasks = JSON.parse(localStorage.getItem(&amp;#39;tasks&amp;#39;)); } tasks.push(task); localStorage.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/javascript/object-oriented/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/javascript/object-oriented/</guid>
      <description>Object oriented features Constructors.. &amp;lsquo;this&amp;rsquo; keyword // Person constructor  function Person(name, dob) { this.name = name; // this.age = age;  this.birthday = new Date(dob); this.calculateAge = function(){ const diff = Date.now() - this.birthday.getTime(); const ageDate = new Date(diff); return Math.abs(ageDate.getUTCFullYear() - 1970); } } // const brad = new Person(&amp;#39;Brad&amp;#39;, 36);  // const john = new Person(&amp;#39;John&amp;#39;, 30);  // console.log(john.age);  const brad = new Person(&amp;#39;Brad&amp;#39;, &amp;#39;9-10-1981&amp;#39;); console.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/javascript/rest-api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/javascript/rest-api/</guid>
      <description>REST Api API - Application Programming Interface - Contract provided by one piece of software to another - Structured request and response  REST API - Representational State Transfer - Architecture style for designing networked apps - Relies on stateless, client server protocol, always http - Treats server objects as resources that can be created and destroyed  HTTP Requests/Verbs GET - Get resources POST - Post resources PUT - Update resources DELETE - Delete resources HEAD - Same as GET but does not return body OPTIONS - Returns the supported HTTP methods PATCH - Update partial resources  API Endpoints GET - /api/users GET - /api/users/1 POST - /api/users PUT - /api/users/1 DELETE - /api/users/1  FAKE online Rest Api for developers: https://jsonplaceholder.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/javascript/tools-converters/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/javascript/tools-converters/</guid>
      <description>Tools / Converters ES6 to ES5 converter - Babel  https://medium.com/@SunnyB/how-to-convert-es6-into-es5-using-babel-1b533d31a169
Babel JS - https://babeljs.io/
Transpiling-es6-to-es5-using-babel  https://www.jonathan-petitcolas.com/2015/03/09/transpiling-es6-to-es5-using-babel.html
ES6Console - https://es6console.com/
Date related functionalities with moment.js: https://momentjs.com/
Useful functionalities in javascript with underscorejs: https://underscorejs.org/
JS framework Backbone.js http://backbonejs.org/</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/javascript/window-object/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/javascript/window-object/</guid>
      <description>Window object In console type window.
window.console.log(&amp;#34;Hello&amp;#34;) window.alert(&amp;#34;Hello World&amp;#34;); // prompt  const input = prompt(); alert(input); //confirm  If (confirm(&amp;#34;Are you sure?&amp;#34;)){ alert(&amp;#34;proceed&amp;#34;); } //window height  alert(window.outerHeight); alert(window.outerWidth); //visible content area.. If firebug is open then the value change here..  alert(window.innerHeight); alert(window.innerWidth); //scroll point  window.scrollY; window.scrollX;  Localtion Object val = window.location console.log(val); //prints info related to http host info, protocol,  //query string, redirection etc.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/linux/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/linux/</guid>
      <description> Practice Linux </description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/python/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/python/</guid>
      <description> Learn Python </description>
    </item>
    
  </channel>
</rss>