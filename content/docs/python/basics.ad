+++
title = "Python Basics"
+++
= INIT

= Python Basics

Python is a general-purpose interpreted, interactive, object-oriented, and high-level programming language.

It is used for:

- Web development (server-side),
- Software development,
- Machine Learning & Mathematics, 
- System scripting.

== Variables

*Int*
{{<highlight python>}}
    one = 1
    two = 2
{{</highlight>}}

*Decimal* 
{{<highlight python>}}
    dem = 1.1
{{</highlight>}}

*String*
{{<highlight python>}}
    strval = "Hello"
{{</highlight>}}

{sp} 

TIP: Variables declared in function are called Local Variable. All other variables are Global variables. 

Global vars can be accessed within the function. 

[.h2-border]
== Functions

*Funtion definition:*
{{<highlight python>}}
    def addNum(one, two):
        return one + two
{{</highlight>}}


*Function call:*
{{<highlight python>}}
    addNum(4,5)
{{</highlight>}}


> `print("Hello" * 5)` this code prints `HelloHelloHelloHelloHello`


[.h2-border]
== IF Statement

Boolean values : `True, False`

*Sample if statement*
{{<highlight python>}}
    if click == True and control == "Button":
        print("Button Clicked")
    elif control == "Radio":
        print("Radio button selected")
    else 
        print("No interaction")
{{</highlight>}}


[.h2-border]
== Lists

Lists are used to store the collection of elements of any type

*General structure of list*
{{<highlight python>}}
    Testlist = ["a", "b", "c"]
    scores = [60, 75, 70, 80, 90]
{{</highlight>}}


The indexing of the list(for ex: scores) goes in two ways. + 
one is `0,1,2,3,4` and another one is `-5,-4,-3,-2,-1` 
{{<highlight python>}}
    print(scores[4])
    print(scores[-1]) 
    # both these statements print 90 
    print(scores[-5]) # prints: 60
{{</highlight>}}


     +---+---+---+---+---+---+
     | P | y | t | h | o | n |
     +---+---+---+---+---+---+
     0   1   2   3   4   5   6
    -6  -5  -4  -3  -2  -1


*Some more notation*
{{<highlight python>}}
    print(scores[0:2])  # prints: 60, 75
    print(scores[1:3])  # prints: 75, 70
    print(scores[2:])   # prints: 70, 80, 90
{{</highlight>}}


*To change the value in a list:*
{{<highlight python>}}
    scores[1] = 35
    print(scores)  # prints: 60, 35, 70, 80, 90
{{</highlight>}}


*To remove/update items from list*
{{<highlight python>}}
    scores[1:3] = []
    print(scores)  # prints: 60, 80, 90
    # update: 
    scores[2] = []
    print(scores) # prints: 60, 75, [], 80, 90
    # list with in list
    scores[2] = ["A", "B"]
    print(scores) # prints: 60, 75, ["A", "B"], 80, 90
    print(scores[2][1])  # prints: "B"
{{</highlight>}}


*Append the list*
{{<highlight python>}}
    scores.append(82)
    print(scores) # prints: 60, 75, 70, 80, 90, 82
{{</highlight>}}


[.h2-border]
== Loops

=== For Loop:

*For Loop on string:* 
{{<highlight python>}}
    word = "Hello"
    for w in word:
        print(w) # prints:  H  e  l  l  o
{{</highlight>}}


*For loop on list:*
{{<highlight python>}}
    numbers = [1,2,3,4,5]
    for n in numbers
        print(n) # prints: 1  2  3  4  5
{{</highlight>}}


*For loop on range:*
{{<highlight python>}}
    numlist = []
    for n in range(10)    
        print(n)            ## prints 0...9 
        numlist.append(n)   ## adds numbers to a list
    # range(start, stop, step)
    for k in range(-1, -6, -2)
        print(k)    # prints: -1  -3  -5
{{</highlight>}}


range(5) - outputs 0, 1, 2, 3, 4


=== While loop:

*While loop sample:*

{{<highlight python>}}
    c = 1
    while (c<=10):
        print(c)  
        c = c + 1
    # Results: 1 ... 10

    letters = ["a", "b", "c"]
    i = 0
    while (i<len(letters)):
        print(letters[i])  
        i += 1
    # Results: a  b  c
{{</highlight>}}


=== Breaking and Continuing in Loops

*Break statement sample:*
{{<highlight python>}}
    members = ["A", "B", "C", "D"]
    for i in range(len(members)):
        if members[i] == "C":
            break
    print(i+1) #prints: 3
{{</highlight>}}


*Continue statement sample:*
{{<highlight python>}}
    for k in range(10):
        print(k)
        if k%3 == 0:
            print("Divided by 3")
            continue
        print("Not divided by 3")
{{</highlight>}}


> Tricky Question & Answer for reference

{{<highlight python>}}
    f = 1
    A = [[1, 2, 3], [2, 3, 4], [3, 4, 5]]
    for i in range(0, 3):
        f =f*i
        for j in range(0, 3):
            A[i][j] = f
    print(A)
{{</highlight>}}

> Answer is: [[0, 0, 0], [0, 0, 0], [0, 0, 0]]


[.h2-border]
== Dictionaries and Sets

=== Sets

*Sample sets code:* Set removes the duplicates by default

{{<highlight python>}}
    age = {"24", "35", "25", "35", "56"}
    print(age) # prints: {'24', '25', '56', '35'}
{{</highlight>}}

*Convert from list:*

    nums = set([7,7,1,3,4,5,5,2])
    print(len(nums)) #prints: 6


Way to check if an element exist in the set:

{{<highlight python>}}
    if "25" in age
        print("People with age 25 attending")
{{</highlight>}}


*Another sample:*

{{<highlight python>}}
    CountryList = []
    for i in range(5):
        Country = input("Please Enter your Country: ")
        CountryList.append(Country)
    CountrySet = set(CountryList)
    print(CountryList)
    print(CountrySet)
{{</highlight>}}

The result would be : 

    Please Enter your Country: "US"
    Please Enter your Country: "UK"
    Please Enter your Country: "US"
    Please Enter your Country: "INDIA"
    Please Enter your Country: "UK"
    ['US', 'UK', 'US', 'INDIA', 'UK']
    set(['INDIA', 'UK', 'US'])

=== Dictionary

Dictionary will be in key value pair. Thats the difference with Sets

*Format:*
{{<highlight python>}}
    Dictionary = {"key":"value","key2":"value2","key3":"value3"}
{{</highlight>}}

*Sample code:*
{{<highlight python>}}
    CountryList = []
    for i in range(5):
        Country = input("Please Enter your Country: ")
        CountryList.append(Country)

    CountryDict = {}
    for Country in CountryList:
        if Country in CountryDict:
            CountryDict[Country] += 1
        else:
            CountryDict[Country] = 1
    print(CountryDict)
{{</highlight>}}

The result would be:

    Please Enter your Country: "US"
    Please Enter your Country: "France"
    Please Enter your Country: "India"
    Please Enter your Country: "France"
    Please Enter your Country: "US"
    {'India': 1, 'US': 2, 'France': 2}

Dictionary keys can be in different types - sample code:
{{<highlight python>}}
    dict = {}
    dict[1] = 2
    dict['1'] = 4
    dict[1] += 2
    count = 0

    print(dict) #prints: {'1': 4, 1: 4} 
{{</highlight>}}

List inside Set is not allowed:
{{<highlight python>}}
    l = [1,2,3,[4,5]] #it is allowed
    s = {1,2,3,[4,5]} #this throws an error
{{</highlight>}}

> Accessing an unspecified index in a ‘list’ will produce an error while doing so the same in ‘dictionary’ will produce a new key

[.h2-border]
== Input and Output

*Input*
{{<highlight python>}}
    age = int(input("Enter age: "))
    print(age)

    # another sample 
    Scores = []
    for i in range(5):
        curscore = float(input("Enter the score" + str(i) + " : "))
        Scores.append(curscore)
    print(Scores) 
    # Result: Printing 5 decimal scores entered by the user
{{</highlight>}}

*Output*

Both the statements below output the same text
{{<highlight python>}}
    print("The score you entered: "+str(curscore)+" good") 
    print("The score you entered:",curscore,"good") 
{{</highlight>}}

> Note the usage of `,` in print statement. It also adds an extra space

`\n` in print statement adds new line
{{<highlight python>}}
    print("The score is:\n" + str(curscore))
{{</highlight>}}


[.h2-border]
== File I/O

Syntax: 
[source,python]
    file = open("filename", "r") # "r", "w", "a", "r+" -> Read and Write
    # file operations
    file.close()

**Read / Write**

Example code for file read/write: 
{{<highlight python>}}
    vacationspots = ["Singapore", "Bali", "Europe", "USA", "Srilanka"]

    vfile = open("VacationPlaces", "w")
    for spot in vacationspots:
        vfile.write(spot + "\n")
    vfile.close

    vfile = open("VacationPlaces", "r")
    print(vfile.read()) # to print whole file content
    # To print file content line by line
    for line in vfile:
        print(line, end="")

    vfile.close
{{</highlight>}}

To read single line from file, use this code
{{<highlight python>}}
    firstline = vfile.readline()
    print(firstline)
{{</highlight>}}

This will change the position of the pointer. 
For ex: if you execute read() code after this line, then it will print from the last position only. 
{{<highlight python>}}
    print(vfile.readline())
    print(vfile.read())

    # Output
    Singapore

    Bali
    Europe
    USA
    Srilanka
{{</highlight>}}


*Append*

{{<highlight python>}}
    finalspot = "Tailand"
    vfile = open("VacationPlaces", "a")
    vfile.write(finalspot)
    vfile.close
{{</highlight>}}

*With keyword :*

With block would automatically close the file once the end of block is reached. 

{{<highlight python>}}
    with open("VacationPlaces", "r") as vfile:
        for line in vfile:
            print(line)
{{</highlight>}}

> to color terminal texts use `termcolor` package - https://pypi.org/project/termcolor/


[.h2-border]
== Classes

Introductions to classes

Syntax: 
{{<highlight python>}}
    class className:
        def __init__(self):
            self.attribute1 = 0
        
        def anotherfunc(self):
            actions(a)

{{</highlight>}}

* `self` has to be added in each function of the class. that refers the class itself
* `__init__` function refers the constructor of the class

Sample class code: 
{{<highlight python>}}
    class Team:
        def __init__(self):
            self.TeamName = "NaN"
            self.TeamOrigin = "NaN"

        def DefineTeamName(self, name):
            self.TeamName = name

    TeamA = Team()
    print(TeamA.TeamName)   # prints "NaN"
    TeamA.DefineTeamName("Tiger")
    print(TeamA.TeamName)   # prints "Tiger"
{{</highlight>}}

*Default value:* +
{{<highlight python>}}
    class Team:
        def __init__(self, Name="Name", Origin="Origin"):
            self.TeamName = Name
            self.TeamOrigin = Origin


    TeamA = Team()
    print(TeamA.TeamName)   # prints "Name"

    TeamB = Team("Cheetah")
    print(TeamB.TeamName)   # prints "Cheetah"
{{</highlight>}}

=== Class Inheritance / Concrete class

*Syntax :* 
{{<highlight python>}}
    class InheritanceClass(ParentClass):
        def __init__(self, input1, input2):
            ParentClass.__init__(self)
            self.attribute1 = input1
            self.attribute2 = input2
{{</highlight>}}

*Sample code :* 
{{<highlight python>}}
    class Team:
        def __init__(self, Name="CSK", Origin="TN"):
            self.TeamName = Name
            self.TeamOrigin = Origin

    class Player(Team):
        def __init__(self):
            Team.__init__(self)
            self.PlayerName = "NaN"
            self.Score = 0

        def setName(self, name):
            self.PlayerName = name

        def __str__(self):
            return "Team - " + self.TeamName + \
                " has player '" + self.PlayerName + "'"

    PlayerA = Player()
    PlayerA.setName("Dhoni")
    print(PlayerA.PlayerName) 
    print(PlayerA.Score)     
    print(PlayerA.TeamName)  
    print(PlayerA.TeamOrigin)
    print(PlayerA)  # Prints the string from '__str__' function

{{</highlight>}}

_OUTPUT:_
[source,python]
    Dhoni
    0
    CSK
    TN
    Team - CSK has player 'Dhoni'

[source,python]
    __str__ function returns something when the object is printed


*Practical scenario of using classes*

* Pets    = Base class
** name, age, hunger
* Dog     = Concrete class inherits Pets 
** base attributes + breed, favoriteToy
* Cat     = Concrete class inherits Pets
** base attributes + place 
* Humans   = Base class
** name, pets
** dog and cat objects are created and passed to human class as list.

{{<highlight python>}}
    class Human:
        def __init__(self, name, pets):
            self.name = name
            self.pets = pets

    PetLover = Human("Alice", [husky_dog, typical_cat])
    print(PetLover.pets[1].name + " - " + str(PetLover.pets[1].age))
{{</highlight>}}


[.h2-border]
== Importing

_SYNTAX:_

    import package_name

_SAMPLE:_ 
{{<highlight python>}}
    import random

    randInt = random.randint(0, 10) 
    print(randInt)      # Integer : 0 >= N <= 10
    randFloat = random.random() 
    print(randFloat)    # Float : 0.0 >= N < 1.0
    randUniform = random.uniform(1, 50) 
    print(randUniform)  # Float : 1.0 >= N < 50.0
{{</highlight>}}


_OUTPUT:_

    2
    0.1554929844739973
    5.860057875357238

*User of Nick-name:* 

{{<highlight python>}}
    import random as r

    randInt = r.randint(0, 10) 
    print(randInt)
{{</highlight>}}

